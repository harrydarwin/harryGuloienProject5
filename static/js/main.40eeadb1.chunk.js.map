{"version":3,"sources":["firebase.js","AddTopic.js","Main.js","OpenArguments.js","TopicList.js","ScrollButton.js","Header.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","BodyAddTopic","handleNewTopic","e","preventDefault","state","userName","newArgue","newTopic","database","ref","push","topic","argument","document","querySelector","value","setState","argumentSubmit","topicString","handleInputChange","target","handleUserNameInput","handleTextareaChange","sectionRef","React","createRef","console","log","this","current","scrollIntoView","id","className","htmlFor","onChange","type","placeholder","required","name","onClick","href","Component","Main","props","formShowing","AddTopic","OpenArgument","handleNewArgument","topicId","finalArray","response","filter","responses","topTag","map","Id","TopicList","topicsList","topicSelect","responseList","topicSelector","topicName","ScrollButton","buttonClicked","showForm","aria-label","Header","App","handleTopicSelect","selectedTopic","handleShowForm","topicList","on","data","currentTopic","firebaseDataObj","val","topicsObject","Topics","topicArray","responseObject","responseArray","responseId","off","basename","process","OpenArguments","allTopics","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.40eeadb1.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database'\r\n\r\n\r\n    // Your web app's Firebase configuration\r\n  const firebaseConfig = {\r\n        apiKey: \"AIzaSyAp9MIJdQ3_D0v3obmdu0Pca8xR9hGzesM\",\r\n    authDomain: \"letsargue-5dd95.firebaseapp.com\",\r\n    databaseURL: \"https://letsargue-5dd95.firebaseio.com\",\r\n    projectId: \"letsargue-5dd95\",\r\n    storageBucket: \"letsargue-5dd95.appspot.com\",\r\n    messagingSenderId: \"1046060093328\",\r\n    appId: \"1:1046060093328:web:6ff4d061c148957d60ad15\"\r\n  };\r\n\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  export default firebase; ","import React, { Component, Fragment } from 'react';\r\n// import AddTopic from './AddTopic.js';\r\nimport firebase from \"./firebase.js\";\r\n\r\nclass BodyAddTopic extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            argumentSubmit: false,\r\n            topicString: \"Enter Argument Topic\"\r\n        }\r\n        this.sectionRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.sectionRef.current)\r\n        this.sectionRef.current.scrollIntoView();\r\n    }\r\n\r\n    handleNewTopic = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (this.state.userName && this.state.newArgue && this.state.newTopic) {\r\n\r\n\r\n\r\n            const dbTopicsRef = firebase.database().ref('Topics')\r\n\r\n\r\n\r\n            //push value at newTopic (user input) into the database\r\n            dbTopicsRef.push({\r\n\r\n                userName: this.state.userName,\r\n                topic: this.state.newTopic,\r\n                argument: this.state.newArgue\r\n            });\r\n            //clear input field\r\n            document.querySelector('input').value = '';\r\n            document.querySelector('#newUserName').value = '';\r\n            document.querySelector('textarea').value = '';\r\n\r\n            this.setState({\r\n                argumentSubmit: true\r\n            })\r\n\r\n            \r\n\r\n        } else {\r\n\r\n            this.setState({\r\n                topicString: \"You must fill out all fields!\"\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    handleInputChange = (e) => {\r\n        // console.log(e.target.value);\r\n        this.setState({\r\n            newTopic: e.target.value\r\n        })\r\n    }\r\n\r\n    handleUserNameInput = (e) => {\r\n        // console.log(e.target.value);\r\n        this.setState({\r\n            userName: e.target.value\r\n        })\r\n    }\r\n\r\n    handleTextareaChange = (e) => {\r\n        // console.log(e.target.value);\r\n        this.setState({\r\n            newArgue: e.target.value\r\n        })\r\n    }\r\n\r\n   render() { \r\n       return (\r\n           <section id=\"topicForm\" className=\"topicForm\" ref={this.sectionRef}>\r\n               <div className=\"flexColumn\">\r\n                    {\r\n                        !this.state.argumentSubmit ?\r\n\r\n                            <form>\r\n                               <div className=\"innerBorder flexColumn\">\r\n                                    <div className=\"flexBox formContainer\">\r\n                                        \r\n                                        <div className=\"flexColumn formBox\">\r\n                                            <div className=\"topInput\">\r\n                                                <label className=\"enterNew\" htmlFor=\"newTopic\">{this.state.topicString}</label>\r\n                                                <input onChange={this.handleInputChange} id=\"newTopic\" type=\"text\" placeholder=\"Topic\" required />\r\n                                        </div>\r\n                                        <div className=\"topInput\">\r\n                                                <label htmlFor=\"newUserName\">Enter your name</label>\r\n                                                <input onChange={this.handleUserNameInput} type=\"text\" name=\"newUserName\" id=\"newUserName\" placeholder=\"Name\" required />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"argumentBox flexColumn FormBox\">\r\n                                            <label htmlFor=\"initialArgument\">Argue the topic but please refrain from personal attacks; racist, sexist, homophobic, transphobic, or any other offensive language will not be tolerated</label>\r\n                                            <textarea onChange={this.handleTextareaChange} name=\"initialArgument\" id=\"initialArgument\" placeholder=\"Opening Argument\" required></textarea>\r\n                                    </div>\r\n                                    </div>\r\n                                        <button className=\"button\" onClick={this.handleNewTopic} >Share An Opinion/New Topic</button>\r\n                                </div>\r\n                            </form>\r\n\r\n                            :\r\n\r\n                            <div className=\"thankYou\">\r\n                                <h4>Thanks for sharing!</h4>\r\n                                <p>Don't forget to come back and defend your statement.</p>\r\n                            </div>\r\n                    }\r\n                    <a className=\"backHome button\" href=\"#App\">Back to other topics</a>\r\n               </div>\r\n           </section>\r\n       )\r\n   }\r\n}\r\nexport default BodyAddTopic","import { Component } from 'react';\r\nimport AddTopic from './AddTopic.js';\r\n\r\nclass Main extends Component {\r\n  \r\n   render() { \r\n       return (\r\n           <main>\r\n               <div className=\"wrapper\">\r\n                    {\r\n                        this.props.formShowing ?\r\n                        <AddTopic />\r\n                        :\r\n                        <div></div>\r\n                    }\r\n               </div>\r\n           </main>\r\n       )\r\n   }\r\n}\r\n\r\nexport default Main","import { Component } from 'react';\r\nimport firebase from \"./firebase.js\";\r\nimport './App.css';\r\n\r\nclass OpenArgument extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            topicId: '',\r\n            responses: [],\r\n            argument: '',\r\n            userName: '',\r\n            topTag: \"Ready To Argue?\"\r\n        }\r\n        \r\n    }\r\n    \r\n//  had my stuff working now there is somthing wrong mayybe with the asynchronisity of setState - my map functin isnt laying things out visually until after you submite the form below...\r\n\r\n    handleNewArgument = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (this.state.userName && this.state.argument) {\r\n           \r\n            const dbResponseRef = firebase.database().ref('responses')\r\n            dbResponseRef.push({\r\n                \r\n                userName: this.state.userName,\r\n                topicId: this.props.topic.id,\r\n                argument: this.state.argument,\r\n                // id: this.props.response.responses.Id\r\n            });\r\n            // this.props.responseUpdate();\r\n            //clear input field\r\n            document.querySelector('input').value = '';\r\n            document.querySelector('textarea').value = '';\r\n\r\n            const finalArray = this.props.response.filter(argument => argument.topicId === this.props.topic.id)\r\n            console.log(finalArray)\r\n            this.setState({\r\n                topic: this.props.topic,\r\n                responses: finalArray\r\n            }, () => { \r\n                console.log(this.state.responses)\r\n            })\r\n            \r\n            \r\n        }\r\n        else {\r\n            this.setState({\r\n                topTag: \"Don't be afraid to share your opinion\"\r\n            })\r\n        }\r\n    }\r\n\r\n    handleUserNameInput = (e) => {\r\n        // console.log(e.target.value);\r\n        this.setState({\r\n            userName: e.target.value\r\n        })\r\n    }\r\n\r\n    handleTextareaChange = (e) => {\r\n        // console.log(e.target.value);\r\n        this.setState({\r\n            argument: e.target.value\r\n        })\r\n        \r\n    }\r\n    \r\n\r\n   render() { \r\n       return ( \r\n           <div className=\"openArguments flexBox\">\r\n               {/* {console.log(this.state.responses) */}\r\n              };\r\n               <div className=\"viewHolder flexColumn\">\r\n                    <h3>{this.props.topic.topic}</h3>\r\n\r\n                <div key={this.props.topic.id} className=\"responses\">\r\n                    <p><span className=\"userName\">{this.props.topic.userName}:</span> {this.props.topic.argument}</p>\r\n                </div>\r\n                   <div className='theArguments'>\r\n                       {\r\n                           this.state.responses.map((topic) => {\r\n                               return (\r\n                                   <div key={topic.Id} className=\"responses\">\r\n                                       <p><span className=\"userName\">{topic.userName}:</span> {topic.argument}</p>\r\n                                   </div>\r\n                               )\r\n                           })\r\n                       }\r\n                   </div>\r\n                    \r\n                    <h3>{this.state.topTag}</h3>\r\n               </div>\r\n               <div>\r\n                <form>\r\n                    <div className=\"flexColumn\">\r\n                        <label className=\"srOnly\" htmlFor=\"userName\">Please enter your name</label>\r\n                       <input onChange={this.handleUserNameInput} type=\"text\" id=\"userName\" name=\"userName\" placeholder=\"Enter your name\"/>\r\n\r\n                        <label htmlFor=\"userArgument\">Argue the topic but please refrain from personal attacks; racist, sexist, homophobic, transphobic, or any other offensive language will not be tolerated</label>\r\n                       <textarea onChange={this.handleTextareaChange} name=\"userArgument\" id=\"userArgument\" placeholder=\"Your point of view\"></textarea>\r\n                       <button className=\"btn button\" onClick={this.handleNewArgument}>Submit Argument</button>\r\n                   </div>\r\n                </form>\r\n               </div>\r\n           </div>\r\n       )\r\n   }\r\n}\r\nexport default OpenArgument","import firebase from \"./firebase.js\";\r\nimport { Component, Fragment } from 'react';\r\nimport Main from './Main.js'\r\nimport OpenArguments from './OpenArguments'\r\nimport './App.css';\r\nimport { TiArrowRight } from \"react-icons/ti\";\r\n// import AddTopic from './AddTopic.js'\r\n\r\nclass TopicList extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            topicsList: [],\r\n            newTopic: '',\r\n            newArgue: '',\r\n            topicSelect: '',\r\n            responseList: ''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        console.log(this.props.topic.topic)\r\n    }\r\n    // componentDidMount() {\r\n\r\n    //     const dbRef = firebase.database().ref();\r\n\r\n    //     dbRef.on('value', (data) => {\r\n    //         //retrieve the topics object from firebase data object, store in a variable to turn into an array of topics! \r\n    //         const firebaseDataObj = data.val();\r\n    //         const topicsObject = firebaseDataObj.Topics;\r\n           \r\n    //         let topicArray = [];\r\n    //         let currentTopic;\r\n    //         for (let topicId in topicsObject) {\r\n    //             currentTopic = topicsObject[topicId];\r\n    //             currentTopic.id = topicId;\r\n    //             topicArray.push(currentTopic);\r\n                \r\n    //         }\r\n    //         // console.log({responseArray});\r\n    //         this.setState({\r\n    //             topicsList: topicArray,\r\n    //             // responseList: responseArray\r\n    //         })\r\n            \r\n            \r\n            \r\n    //     })\r\n    // }\r\n\r\n    // handleTopicSelect = (topic) => {\r\n    //    this.setState({\r\n    //        selectedTopic: topic\r\n    //    })\r\n       \r\n    // }   \r\n    \r\n\r\n   render() {\r\n       return (\r\n           <Fragment>\r\n               <li key={this.props.id}>\r\n                   <p className=\"listedTopic btn\" onClick={() => { this.props.topicSelector(this.props.topic) }}><span className=\"noSelect\">{this.props.topicName}</span></p>\r\n               </li>               \r\n           </Fragment>\r\n       )\r\n   }\r\n}\r\nexport default TopicList","import { Component, Fragment } from 'react';\r\nimport AddTopic from './AddTopic.js'\r\n\r\n\r\n\r\n\r\nclass ScrollButton extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            buttonClicked: false\r\n        }\r\n    }\r\n\r\n   render() { \r\n       return (\r\n        <Fragment>\r\n            <section className=\"addButton\">\r\n                <div className=\"wrapper\">\r\n                    <div className=\"flexColumn\">\r\n                           <a href=\"#topicForm\"\r\n                           className=\"button newTopicButton\"\r\n                           onClick={() => { this.props.showForm() }}\r\n                           aria-label=\"Click to start new topic\"\r\n                           >Start a new topic</a>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </Fragment>\r\n       )\r\n   }\r\n}\r\n\r\nexport default ScrollButton","import { Component } from 'react';\r\nimport TopicList from './TopicList.js';\r\nimport ScrollButton from './ScrollButton.js';\r\n\r\nclass Header extends Component {\r\n   render() { \r\n       return (\r\n           <header>\r\n               <section id=\"home\" className=\"home\">\r\n                        <div className=\"flexColumn\">\r\n                            <h2>An open forum debating app you can use to argue other peoples opinions or share & defend one of your own</h2>\r\n                            <div className=\"headBox\">\r\n                                <ScrollButton\r\n                                showForm={this.props.showForm}\r\n                                />\r\n                           </div>\r\n                        </div>\r\n               </section>\r\n           </header>\r\n       )\r\n   }\r\n}\r\nexport default Header","import './normalize.css';\nimport './App.css';\nimport firebase from \"./firebase.js\";\nimport {\n    BrowserRouter as Router,\n    Route\n} from 'react-router-dom';\nimport TopicList from './TopicList.js';\nimport { Component, Fragment } from 'react';\nimport Header from './Header.js';\nimport OpenArguments from './OpenArguments.js';\nimport Main from './Main.js';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            showForm: false,\n            selectedTopic: '',\n            topicList: [],\n            responseList: []\n        }\n    }\n\n    componentDidMount() {\n\n        const dbRef = firebase.database().ref();\n\n        dbRef.on('value', (data) => {\n            //retrieve the topics object from firebase data object, store in a variable to turn into an array of topics! \n            const firebaseDataObj = data.val();\n            const topicsObject = firebaseDataObj.Topics;\n\n            let topicArray = [];\n            let currentTopic;\n            for (let topicId in topicsObject) {\n                currentTopic = topicsObject[topicId];\n                currentTopic.id = topicId;\n                topicArray.push(currentTopic);\n\n            }\n\n            const responseObject = firebaseDataObj.responses;\n            // console.log({ responseObject });\n\n            let responseArray = [];\n            let responses;\n            for (let responseId in responseObject) {\n                \n                responses = responseObject[responseId];\n                responses.Id = responseId;\n                responses.topicId = responseObject[responseId].topicId;\n                responseArray.push(responses);\n                \n            }\n            \n            \n            this.setState({\n                topicList: topicArray,\n                responseList: responseArray\n            })\n           \n           \n        })\n    }\n\n    componentWillUnmount() {\n        const dbRef = firebase.database().ref();\n        dbRef.off('value');\n    }\n\n\n    handleTopicSelect = (topic) => {\n        this.setState({\n            selectedTopic: topic\n        })\n       \n\n    }   \n\n    handleShowForm = () => {\n        // e.preventDefault();\n        this.setState({\n            showForm: true\n        })\n\n    }\n\n    \n  \n       \n        \n    \n    \n\n   render() { \n       return (\n          <Fragment>\n            <Router basename={process.env.PUBLIC_URL}>\n                <div id=\"App\" className=\"App wrapper\">\n                       <div className=\"flexBox mainContain\">\n                           <ul className='topicList flexColumn'>\n                                {\n                                   this.state.topicList.map((topic) => {\n                                       return(\n                                           <TopicList\n                                                topic={topic}\n                                                id={topic.id}\n                                                topicName={topic.topic}\n                                                topicsList = {this.state.topicList}\n                                               topicSelector={this.handleTopicSelect}\n                                           />\n                                       )\n                                   })\n                                }   \n                           </ul>\n                           {\n                               this.state.selectedTopic ?\n                                   <OpenArguments\n                                       topic={this.state.selectedTopic}\n                                       allTopics={this.state.topicList}\n                                       response={this.state.responseList}\n                                   />\n\n                                   :\n                           <div className=\"heading\">\n                               <h1>Let's Argue</h1>\n                               <Route exact path=\"/\" render={() => {\n                                   return (\n                                       <Header\n                                       showForm={this.handleShowForm} />\n                                       )\n                                    }} />\n                           </div>\n                                }\n                       </div>\n                    \n                    <Main \n                    formShowing={this.state.showForm}\n                    />\n                </div>\n            </Router>\n          </Fragment>\n       )\n   }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}